services:
  django:
    build: .
    container_name: reminder_django
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:alpine
    container_name: reminder_redis
    # ports:   # dışarı açmıyoruz
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: reminder_db
    environment:
      POSTGRES_DB: reminderdb
      POSTGRES_USER: reminderuser
      POSTGRES_PASSWORD: reminderpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:   # dışarı açmıyoruz
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  celery:
    build: .
    container_name: reminder_celery
    command: celery -A reminder_app worker --loglevel=info --pool=solo
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  flower:
    build: .
    container_name: reminder_flower
    command: celery -A reminder_app flower --port=5555
    # gerekli ise port aç: "5555:5555" (şu an GCP firewall'da kapalı, dışarıdan görünmez)
    # ports:
    #   - "5555:5555"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
